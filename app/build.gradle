import io.gitlab.arturbosch.detekt.Detekt

plugins {
    id "com.android.application"
    id "com.apollographql.apollo3"
    id "com.diffplug.spotless"
    id "com.github.ben-manes.versions"
    id "com.google.gms.google-services"
    id "com.squareup.wire"
    id "dagger.hilt.android.plugin"
    id "io.gitlab.arturbosch.detekt"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "org.jetbrains.kotlin.kapt"
    id "org.jlleitschuh.gradle.ktlint"
}

apply from: "../dependencies.gradle"

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.tomg.githubreleasemonitor"
        minSdkVersion 31
        targetSdkVersion 32
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
}

tasks.named("dependencyUpdates").configure {
    def isNonStable = { String version ->
        def stableKeyword = ["RELEASE", "FINAL", "GA"].any { keyword ->
            version.toUpperCase().contains(keyword)
        }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

tasks.withType(Detekt).configureEach {
    jvmTarget = "1.8"
}

apollo {
    packageNamesFromFilePaths()
}

detekt {
    baseline = file("$projectDir/config/baseline.xml")
}

ktlint {
    android.set(true)
    disabledRules.set(["import-ordering"])
    filter {
        exclude { element -> element.file.path.contains("generated/") }
        include("**/kotlin/**")
    }
}

spotless {
    kotlin {
        target("src/*/java/**/*.kt")
        //noinspection GroovyImplicitNullArgumentCall
        ktlint()
        endWithNewline()
        licenseHeaderFile rootProject.file("spotless/copyright.txt")
    }
}

wire {
    kotlin {
        android = true
    }
    sourcePath {
        srcDir "src/main/protos"
    }
}

dependencies {
    androidTestImplementation android_test_dependencies.values()
    api api_dependencies.values()
    implementation implementation_dependencies.values()
    kapt kapt_dependencies.values()
    runtimeOnly runtime_only_dependencies.values()
    testImplementation test_dependencies.values()
}
