<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$id != null &amp;&amp; authorAvatarUrl.isNotEmpty() &amp;&amp; authorHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseName.isNotEmpty() &amp;&amp; latestReleaseTimestamp.isNotEmpty()</ID>
    <ID>ComplexCondition:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$result > 0 &amp;&amp; repositoryOwner.isNotEmpty() &amp;&amp; repositoryName.isNotEmpty() &amp;&amp; authorAvatarUrl.isNotEmpty() &amp;&amp; authorHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseHtmlUrl.isNotEmpty() &amp;&amp; latestReleaseName.isNotEmpty() &amp;&amp; latestReleaseTimestamp.isNotEmpty()</ID>
    <ID>FunctionNaming:AddGitHubRepositoryDialog.kt$@Composable fun AddGitHubRepositoryDialog( viewModel: AddRepositoryViewModel, onDismiss: () -> Unit, onConfirm: (repositoryOwner: String, repositoryName: String) -> Unit )</ID>
    <ID>FunctionNaming:AddGitHubRepositoryDialog.kt$@Composable fun TextFieldBottomIndicator( helperText: String, errorText: String, textColor: Color = MaterialTheme.colorScheme.onSurfaceVariant, errorTextColor: Color = MaterialTheme.colorScheme.error, isError: Boolean = false, charCnt: Int = 0, maxCharCnt: Int = Integer.MAX_VALUE )</ID>
    <ID>FunctionNaming:GitHubRepositoryItem.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @Composable fun GitHubRepositoryItem( swipeableState: SwipeableState&lt;Float> = rememberSwipeableState(initialValue = 0f), gitHubRepository: GitHubRepository = GitHubRepository(), onGitHubUserAvatarSelected: (String) -> Unit = {}, onGitHubRepositoryReleaseSelected: (String) -> Unit = {}, onDeleteGitHubRepository: (GitHubRepository) -> Unit = {} )</ID>
    <ID>FunctionNaming:GitHubRepositoryItem.kt$@Preview(name = "Repository Item Preview") @Composable fun GitHubRepositoryItem()</ID>
    <ID>FunctionNaming:LoginScreen.kt$@Composable fun LoginScreen( signInEnabled: Boolean = false, onLoginRequested: () -> Unit = {} )</ID>
    <ID>FunctionNaming:LoginScreen.kt$@Composable fun LoginScreen( viewModel: LoginViewModel, onNavigateToMain: () -> Unit )</ID>
    <ID>FunctionNaming:LoginScreen.kt$@Preview(name = "Login Screen") @Composable fun LoginScreenPreview()</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun Refresh( modifier: Modifier = Modifier, alignment: Alignment = Alignment.Center, onRefresh: () -> Unit )</ID>
    <ID>FunctionNaming:MainScreen.kt$@Composable fun Spinner( modifier: Modifier = Modifier, progressModifier: Modifier = Modifier.padding(all = 16.dp), alignment: Alignment = Alignment.Center )</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalMaterial3Api @Composable fun BottomBar( defaultSortOrder: SortOrder, onApplySortOrder: (SortOrder) -> Unit, onRefresh: () -> Unit, onShowSettings: () -> Unit )</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalAnimationApi @Composable fun MainScreen( mainViewModel: MainViewModel, addRepositoryViewModel: AddRepositoryViewModel, onNavigateToSettings: () -> Unit )</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalAnimationApi @Composable fun MainScreen( snackbarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository>? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, onAddGitHubRepository: () -> Unit = {}, onApplySortOrder: (SortOrder) -> Unit = {}, onShowSettings: () -> Unit = {}, onUserAvatarSelected: (String) -> Unit = {}, onReleaseSelected: (String) -> Unit = {}, onRefresh: () -> Unit = {}, onDelete: (GitHubRepository) -> Unit = {} )</ID>
    <ID>FunctionNaming:MainScreen.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalAnimationApi @Preview(name = "Main Screen") @Composable fun MainScreenPreview()</ID>
    <ID>FunctionNaming:NavGraph.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalComposeUiApi @ExperimentalCoroutinesApi @ExperimentalAnimationApi @Composable fun NavGraph( navController: NavHostController, startDestination: String = NavDestinations.ROUTE_LOGIN )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @ExperimentalCoroutinesApi @ExperimentalAnimationApi @Composable fun SettingScreen( snackbarHostState: SnackbarHostState = remember { SnackbarHostState() }, dataStore: DataStore&lt;Preferences> = mockDataStore, monitorIntervalPreferenceRequest: PreferenceRequest&lt;String> = emptyPreferenceRequest, monitorIntervalEntries: Map&lt;String, String> = mapOf(), monitorIntervalDisplayName: String = String.Empty, onGitHubRepositoriesImport: () -> Unit = {}, onGitHubRepositoriesExport: () -> Unit = {}, onUserSignOutRequested: () -> Unit = {}, onNavigateUp: () -> Unit = {} )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @ExperimentalCoroutinesApi @ExperimentalAnimationApi @Composable fun SettingsScreen( viewModel: SettingsViewModel, onNavigateToLogin: () -> Unit, onNavigateUp: () -> Unit )</ID>
    <ID>FunctionNaming:SettingsScreen.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @ExperimentalCoroutinesApi @ExperimentalAnimationApi @Preview(name = "Settings Screen") @Composable fun SettingsScreen()</ID>
    <ID>FunctionNaming:SignOutDialog.kt$@Composable fun SignOutDialog( onDismiss: () -> Unit, onConfirm: () -> Unit )</ID>
    <ID>FunctionNaming:SortOrderDialog.kt$@ExperimentalMaterial3Api @Composable fun SortOrderDialog( defaultSortOrder: SortOrder, onDismiss: () -> Unit, onConfirm: (SortOrder) -> Unit )</ID>
    <ID>FunctionNaming:Theme.kt$@Composable fun GithubReleaseMonitorTheme( darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -> Unit )</ID>
    <ID>LongMethod:AddGitHubRepositoryDialog.kt$@Composable fun AddGitHubRepositoryDialog( viewModel: AddRepositoryViewModel, onDismiss: () -> Unit, onConfirm: (repositoryOwner: String, repositoryName: String) -> Unit )</ID>
    <ID>LongMethod:GitHubRepositoryItem.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @Composable fun GitHubRepositoryItem( swipeableState: SwipeableState&lt;Float> = rememberSwipeableState(initialValue = 0f), gitHubRepository: GitHubRepository = GitHubRepository(), onGitHubUserAvatarSelected: (String) -> Unit = {}, onGitHubRepositoryReleaseSelected: (String) -> Unit = {}, onDeleteGitHubRepository: (GitHubRepository) -> Unit = {} )</ID>
    <ID>LongMethod:GitHubRepositoryReleaseRepository.kt$GitHubRepositoryReleaseRepository$suspend fun getGitHubRepositoriesOrNull( gitHubRepositories: List&lt;GitHubRepository>, accessToken: String ): List&lt;GitHubRepository>?</ID>
    <ID>LongMethod:MainScreen.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalAnimationApi @Composable fun MainScreen( mainViewModel: MainViewModel, addRepositoryViewModel: AddRepositoryViewModel, onNavigateToSettings: () -> Unit )</ID>
    <ID>LongMethod:MainScreen.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalAnimationApi @Composable fun MainScreen( snackbarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository>? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, onAddGitHubRepository: () -> Unit = {}, onApplySortOrder: (SortOrder) -> Unit = {}, onShowSettings: () -> Unit = {}, onUserAvatarSelected: (String) -> Unit = {}, onReleaseSelected: (String) -> Unit = {}, onRefresh: () -> Unit = {}, onDelete: (GitHubRepository) -> Unit = {} )</ID>
    <ID>LongMethod:NavGraph.kt$@ExperimentalMaterialApi @ExperimentalMaterial3Api @ExperimentalCoilApi @ExperimentalComposeUiApi @ExperimentalCoroutinesApi @ExperimentalAnimationApi @Composable fun NavGraph( navController: NavHostController, startDestination: String = NavDestinations.ROUTE_LOGIN )</ID>
    <ID>LongMethod:SettingsScreen.kt$@ExperimentalMaterial3Api @ExperimentalComposeUiApi @ExperimentalCoroutinesApi @ExperimentalAnimationApi @Composable fun SettingsScreen( viewModel: SettingsViewModel, onNavigateToLogin: () -> Unit, onNavigateUp: () -> Unit )</ID>
    <ID>LongMethod:SortOrderDialog.kt$@ExperimentalMaterial3Api @Composable fun SortOrderDialog( defaultSortOrder: SortOrder, onDismiss: () -> Unit, onConfirm: (SortOrder) -> Unit )</ID>
    <ID>LongParameterList:AddGitHubRepositoryDialog.kt$( helperText: String, errorText: String, textColor: Color = MaterialTheme.colorScheme.onSurfaceVariant, errorTextColor: Color = MaterialTheme.colorScheme.error, isError: Boolean = false, charCnt: Int = 0, maxCharCnt: Int = Integer.MAX_VALUE )</ID>
    <ID>LongParameterList:MainScreen.kt$( snackbarHostState: SnackbarHostState = remember { SnackbarHostState() }, gitHubRepositories: LazyPagingItems&lt;GitHubRepository>? = null, defaultSortOrder: SortOrder = SortOrder.Asc.RepositoryOwner, isLoading: Boolean = false, onAddGitHubRepository: () -> Unit = {}, onApplySortOrder: (SortOrder) -> Unit = {}, onShowSettings: () -> Unit = {}, onUserAvatarSelected: (String) -> Unit = {}, onReleaseSelected: (String) -> Unit = {}, onRefresh: () -> Unit = {}, onDelete: (GitHubRepository) -> Unit = {} )</ID>
    <ID>LongParameterList:SettingsScreen.kt$( snackbarHostState: SnackbarHostState = remember { SnackbarHostState() }, dataStore: DataStore&lt;Preferences> = mockDataStore, monitorIntervalPreferenceRequest: PreferenceRequest&lt;String> = emptyPreferenceRequest, monitorIntervalEntries: Map&lt;String, String> = mapOf(), monitorIntervalDisplayName: String = String.Empty, onGitHubRepositoriesImport: () -> Unit = {}, onGitHubRepositoriesExport: () -> Unit = {}, onUserSignOutRequested: () -> Unit = {}, onNavigateUp: () -> Unit = {} )</ID>
    <ID>LongParameterList:SettingsViewModel.kt$SettingsViewModel$( savedStateHandle: SavedStateHandle, private val gitHubAuthenticationRepository: GitHubAuthenticationRepository, private val gitHubReleaseMonitorRepository: GitHubReleaseMonitorRepository, private val gitHubRepositoryJsonRepository: GitHubRepositoryJsonRepository, private val gitHubRepositoryRepository: GitHubRepositoryRepository, private val settingsRepository: SettingsRepository, private val userRepository: UserRepository )</ID>
    <ID>MagicNumber:GitHubRepositoryItem.kt$36f</ID>
    <ID>MagicNumber:RateLimit.kt$RateLimit$5000</ID>
    <ID>MagicNumber:SettingsRepository.kt$SettingsRepository$15</ID>
    <ID>MagicNumber:SettingsRepository.kt$SettingsRepository$16</ID>
    <ID>MagicNumber:SettingsRepository.kt$SettingsRepository$30</ID>
    <ID>MagicNumber:SettingsRepository.kt$SettingsRepository$4</ID>
    <ID>MagicNumber:SettingsRepository.kt$SettingsRepository$8</ID>
    <ID>SpreadOperator:GitHubRepositoryReleaseWorker.kt$GitHubRepositoryReleaseWorker$(*results.toTypedArray())</ID>
    <ID>SpreadOperator:MainViewModel.kt$MainViewModel$(*repositories.toTypedArray())</ID>
    <ID>SpreadOperator:SettingsViewModel.kt$SettingsViewModel$(*gitHubRepositories)</ID>
  </CurrentIssues>
</SmellBaseline>
